# -*- coding: utf-8 -*-
"""Louvremusuem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FDb-uBurNGf5IKOTKLuaBK7Is2XXOCZA
"""

class Artwork:#This class represents the Artwork
    artwork_list = [] #This defines an epmty list for the artwork

    def __init__(self, name, artwork_type, creator, year_of_creation, origin, condition, quantity, price):# The constructor method initializes the object with the provided values for its attributes
        self._name = name # This line sets the name attribute of the Artwork object to the value passed as the name parameter
        self._artwork_type = artwork_type # This line sets the artwork_type attribute of the Artwork object to the value passed as the artwork_type parameter
        self._creator = creator # This line sets the creator attribute of the Artwork object to the value passed as the creator parameter
        self._year_of_creation = year_of_creation # This line sets the year_of_creation attribute of the Artwork object to the value passed as the year_of_creation parameter
        self._origin = origin # This line sets the origin attribute of the Artwork object to the value passed as the origin parameter
        self._condition = condition # This line sets the condition attribute of the Artwork object to the value passed as the condition parameter
        self._quantity = quantity # This line sets the quantity attribute of the Artwork object to the value passed as the quantity parameter
        self._price = price # This line sets the price attribute of the Artwork object to the value passed as the price parameter
        Artwork.artwork_list.append(self) # This line appends the Artwork into the list
    @classmethod
    def display_all_names(cls): #This function dispalys all the names of the artwork
        print("Artwork Names:") #This line prints Artwork Names
        for artwork in cls.artwork_list: #This line uses a for loop that iterates over the artwork list
            print(artwork.get_name()) #This line prints the artwork name by the getter method
    @classmethod
    def display_all_details(cls): #This function displays all the details of the artwork
        print("Artwork Details:") #This line prints Artwork Details
        for artwork in cls.artwork_list: #This line uses a for loop that iterates over the artwork list
            print("Name:", artwork.get_name()) #This line prints the artwork name by the getter method
            print("Type:", artwork.get_artwork_type()) #This line prints the artwork type by the getter method
            print("Creator:", artwork.get_creator()) #This line prints the artwork creator by the getter method
            print("Year of Creation:", artwork.get_year_of_creation()) #This line prints the artwork year of creation by the getter method
            print("Origin:", artwork.get_origin()) #This line prints the artwork origin by the getter method
            print("Condition:", artwork.get_condition()) #This line prints the artwork condition by the getter method
            print("Quantity:", artwork.get_quantity()) #This line prints the artwork quantity by the getter method
            print("Price:", artwork.get_price()) #This line prints the artwork price by the getter method
            print()
#setter method for all attributes that can modify, getter method for all attributes that retrieves
    def get_name(self):
        return self._name

    def set_name(self, name):
        self._name = name

    def get_artwork_type(self):
        return self._artwork_type

    def set_artwork_type(self, artwork_type):
        self._artwork_type = artwork_type

    def get_creator(self):
        return self._creator

    def set_creator(self, creator):
        self._creator = creator

    def get_year_of_creation(self):
        return self._year_of_creation

    def set_year_of_creation(self, year_of_creation):
        self._year_of_creation = year_of_creation

    def get_origin(self):
        return self._origin

    def set_origin(self, origin):
        self._origin = origin

    def get_condition(self):
        return self._condition

    def set_condition(self, condition):
        self._condition = condition

    def get_quantity(self):
        return self._quantity

    def set_quantity(self, quantity):
        self._quantity = quantity

    def get_price(self):
        return self._price

    def set_price(self, price):
        self._price = price
class Gallery:#This class represents the Gallery
    def __init__(self, theme, curator, opening_date): # The constructor method initializes the object with the provided values for its attributes
        self._theme = theme # This line sets the theme attribute of the Gallery object to the value passed as the theme parameter
        self._curator = curator # This line sets the curator theme attribute of the Gallery object to the value passed as the curator parameter
        self._opening_date = opening_date # This line sets the opening_date theme attribute of the Gallery object to the value passed as the opening_date parameter
        self._total_pieces = 0 # This line sets the total_pieces theme attribute of the Gallery object to the value passed as the 0 parameter
        self._total_visitors = 0 # This line sets the total_visitors theme attribute of the Gallery object to the value passed as the 0 parameter
#setter method for all attributes that can modify, getter method for all attributes that retrieves
    def set_theme(self, theme):
        self._theme = theme

    def get_theme(self):
        return self._theme

    def set_curator(self, curator):
        self._curator = curator

    def get_curator(self):
        return self._curator

    def set_opening_date(self, opening_date):
        self._opening_date = opening_date

    def get_opening_date(self):
        return self._opening_date

    def add_piece(self):
        self._total_pieces += 1

    def remove_piece(self): # Method to remove a piece
        if self._total_pieces > 0: # Check if there are pieces
            self._total_pieces -= 1  # Reduce the total number of pieces by 1

    def add_visitor(self, num_visitors): # Method to add visitors
        self._total_visitors += num_visitors # Increase the total number of visitors

    def remove_visitor(self, num_visitors): # Method to remove visitors
        if self._total_visitors >= num_visitors: # Check if there are enough visitors to remove
            self._total_visitors -= num_visitors # Reduce the total number of visitors by the specified amount

    def display_gallery_info(self): #This method displays all the gallery information
        print("Gallery Details:") #This line prints Gallery Details
        print("Gallery Theme:", self._theme) #This line prints the theme of the gallery
        print("Curator:", self._curator) #This line prints the curator of the gallery
        print("Opening Date:", self._opening_date) #This line prints the opening date of the gallery
        print("Total Pieces:", self._total_pieces) #This line prints the total pieces of the gallery
        print("Total Visitors:", self._total_visitors) #This line prints the total visitors of the gallery
class Location:#This class represents the location
    def __init__(self, room_number, floor, coordinates, piece_collection=None, piece_gallery=None, piece_exhibition=None): # The constructor method initializes the object with the provided values for its attributes
        self._room_number = room_number  # This line sets the room_number attribute of the location object to the value passed as the location parameter
        self._floor = floor # This line sets the floor attribute of the location object to the value passed as the floor parameter
        self._coordinates = coordinates # This line sets the coordinates attribute of the location object to the value passed as the coordinates parameter
        self._piece_collection = piece_collection # This line sets the piece_collection attribute of the location object to the value passed as the piece_collection parameter
        self._piece_gallery = piece_gallery # This line sets the piece_gallery attribute of the location object to the value passed as the piece_gallery parameter
        self._piece_exhibition = piece_exhibition # This line sets the piece_exhibition attribute of the location object to the value passed as the piece_exhibition parameter
#setter method for all attributes that can modify, getter method for all attributes that retrieves
    def set_room_number(self, room_number):
        self._room_number = room_number

    def get_room_number(self):
        return self._room_number

    def set_floor(self, floor):
        self._floor = floor

    def get_floor(self):
        return self._floor

    def set_coordinates(self, coordinates):
        self._coordinates = coordinates

    def get_coordinates(self):
        return self._coordinates

    def set_piece_collection(self, piece_collection):
        self._piece_collection = piece_collection

    def get_piece_collection(self):
        return self._piece_collection

    def set_piece_gallery(self, piece_gallery):
        self._piece_gallery = piece_gallery

    def get_piece_gallery(self):
        return self._piece_gallery

    def set_piece_exhibition(self, piece_exhibition):
        self._piece_exhibition = piece_exhibition

    def get_piece_exhibition(self):
        return self._piece_exhibition

    def display_location_info(self): #This method dispalys the location information
        print("Location Details:") #This line prints location Details
        print("Room Number:", self._room_number) #This line prints the room_number of the location
        print("Floor:", self._floor) #This line prints the floor of the location
        print("Coordinates:", self._coordinates) #This line prints the coordinates of the location
        print("Piece Collection:", self._piece_collection) #This line prints the piece_collection of the location
        print("Piece Gallery:", self._piece_gallery) #This line prints the piece_gallery of the location
        print("Piece Exhibition:", self._piece_exhibition) #This line prints the piece_exhibition of the location

from datetime import datetime #This line imports the datetime in order to be used for the attributes in the Exhibition class
class Exhibition:#This class represents the Exhibition
    def __init__(self, theme, organizer, special_guests, start_time, end_time, start_date, end_date, fees, total_pieces, total_visitors): # The constructor method initializes the object with the provided values for its attributes
        self._theme = theme  # This line sets the theme attribute of the Exhibition object to the value passed as the theme parameter
        self._organizer = organizer # This line sets the organizer attribute of the Exhibition object to the value passed as the organizer parameter
        self._special_guests = special_guests # This line sets the special_guests attribute of the Exhibition object to the value passed as the special_guests parameter
        self._start_time = start_time # This line sets the tart_time attribute of the Exhibition object to the value passed as the tart_time parameter
        self._end_time = end_time # This line sets the end_time attribute of the Exhibition object to the value passed as the end_time parameter
        self._start_date = datetime.strptime(start_date, "%Y-%m-%d") # This line sets the start_date attribute of the Exhibition object to the value passed as the datetime.strptime(start_date, "%Y-%m-%d") parameter
        self._end_date = datetime.strptime(end_date, "%Y-%m-%d") # This line sets the end_date attribute of the Exhibition object to the value passed as the datetime.strptime(end_date, "%Y-%m-%d") parameter
        self._fees = fees # This line sets the theme attribute of the Exhibition object to the value passed as the theme parameter
        self._total_pieces = total_pieces # This line sets the total_pieces attribute of the Exhibition object to the value passed as the total_pieces parameter
        self._total_visitors = total_visitors # This line sets the total_visitors attribute of the Exhibition object to the value passed as the total_visitors parameter
#setter method for all attributes that can modify, getter method for all attributes that retrieves
    def set_theme(self, theme):
        self._theme = theme

    def get_theme(self):
        return self._theme

    def set_organizer(self, organizer):
        self._organizer = organizer

    def get_organizer(self):
        return self._organizer

    def set_special_guests(self, special_guests):
        self._special_guests = special_guests

    def get_special_guests(self):
        return self._special_guests

    def set_start_time(self, start_time):
        self._start_time = start_time

    def get_start_time(self):
        return self._start_time

    def set_end_time(self, end_time):
        self._end_time = end_time

    def get_end_time(self):
        return self._end_time

    def set_start_date(self, start_date):
        self._start_date = datetime.strptime(start_date, "%Y-%m-%d")

    def get_start_date(self):
        return self._start_date

    def set_end_date(self, end_date):
        self._end_date = datetime.strptime(end_date, "%Y-%m-%d")

    def get_end_date(self):
        return self._end_date

    def set_fees(self, fees):
        self._fees = fees

    def get_fees(self):
        return self._fees

    def set_total_pieces(self, total_pieces):
        self._total_pieces = total_pieces

    def get_total_pieces(self):
        return self._total_pieces

    def set_total_visitors(self, total_visitors):
        self._total_visitors = total_visitors

    def get_total_visitors(self):
        return self._total_visitors

    def display_exhibition_info(self): #This method dispalys all the exhibition information
        print("Exhibition Details:") #This line prints Exhibition Details
        print("Theme:", self._theme) #This line prints the theme of the exhibition
        print("Organizer:", self._organizer) #This line prints the organizer of the exhibition
        print("Special Guests:", ", ".join(self._special_guests)) #This line prints the special guests of the exhibition
        print("Start Time:", self._start_time) #This line prints the start time of the exhibition
        print("End Time:", self._end_time) #This line prints the end time of the exhibition
        print("Start Date:", self._start_date.strftime("%Y-%m-%d")) #This line prints the start date of the exhibition
        print("End Date:", self._end_date.strftime("%Y-%m-%d")) #This line prints the end date of the exhibition
        print("Fees:", self._fees) #This line prints the fees of the exhibition
        print("Total Pieces:", self._total_pieces) #This line prints the total pieces of the exhibition
        print("Total Visitors:", self._total_visitors) #This line prints the total visitors of the exhibition

    def calculate_duration(self):#This method calcultes the duration of the exhibition
        duration = (self._end_date - self._start_date).days #This line calcultes the duration by subtracting the end date by the start date
        return duration #This line returns the calculted duration
class Collection:#This class represents the collection
    def __init__(self, theme, curator, significant_pieces, num_of_collections, total_visitors): # The constructor method initializes the object with the provided values for its attributes
        self._theme = theme # This line sets the theme attribute of the collection object to the value passed as the theme parameter
        self._curator = curator # This line sets the curator attribute of the collection object to the value passed as the curator parameter
        self._significant_pieces = significant_pieces # This line sets the significant_pieces attribute of the collection object to the value passed as the significant_pieces parameter
        self._num_of_collections = num_of_collections # This line sets the num_of_collections attribute of the collection object to the value passed as the num_of_collections parameter
        self._total_visitors = total_visitors # This line sets the total_visitors attribute of the collection object to the value passed as the total_visitors parameter
#setter method for all attributes that can modify, getter method for all attributes that retrieves
    def set_theme(self, theme):
        self._theme = theme

    def get_theme(self):
        return self._theme

    def set_curator(self, curator):
        self._curator = curator

    def get_curator(self):
        return self._curator

    def set_significant_pieces(self, significant_pieces):
        self._significant_pieces = significant_pieces

    def get_significant_pieces(self):
        return self._significant_pieces

    def set_num_of_collections(self, num_of_collections):
        self._num_of_collections = num_of_collections

    def get_num_of_collections(self):
        return self._num_of_collections

    def set_total_visitors(self, total_visitors):
        self._total_visitors = total_visitors

    def get_total_visitors(self):
        return self._total_visitors

    def display_collection_info(self): #This method displays the collection information
        print("Collection Details:") #This line prints collection Details
        print("Theme:", self._theme) #This line prints the theme of the collection
        print("Curator:", self._curator) #This line prints the curator of the collection
        print("Significant Pieces:", ", ".join(self._significant_pieces)) #This line prints the Significant Pieces of the collection
        print("Number of Collections:", self._num_of_collections) #This line prints the num_of_collections of the collection
        print("Total Visitors:", self._total_visitors) #This line prints the total_visitors of the collection
class Employee:# This class represents the Employee
    def __init__(self, employee_ID, first_name, last_name, role, schedule, department, employment_status): # The constructor method initializes the object with the provided values for its attributes
        self._employee_ID = employee_ID # This line sets the employee_ID attribute of the Employee object to the value passed as the employee_ID parameter
        self._first_name = first_name # This line sets the first_name attribute of the Employee object to the value passed as the first_name parameter
        self._last_name = last_name # This line sets the last_name attribute of the Employee object to the value passed as the last_name parameter
        self._role = role # This line sets the role attribute of the Employee object to the value passed as the role parameter
        self._schedule = schedule # This line sets the schedule attribute of the Employee object to the value passed as the schedule parameter
        self._department = department # This line sets the department attribute of the Employee object to the value passed as the department parameter
        self._employment_status = employment_status # This line sets the employment_status attribute of the Employee object to the value passed as the employment_status parameter
#setter method for all attributes that can modify, getter method for all attributes that retrieves
    def set_employee_ID(self, employee_ID):
        self._employee_ID = employee_ID

    def get_employee_ID(self):
        return self._employee_ID

    def set_first_name(self, first_name):
        self._first_name = first_name

    def get_first_name(self):
        return self._first_name

    def set_last_name(self, last_name):
        self._last_name = last_name

    def get_last_name(self):
        return self._last_name

    def set_role(self, role):
        self._role = role

    def get_role(self):
        return self._role

    def set_schedule(self, schedule):
        self._schedule = schedule

    def get_schedule(self):
        return self._schedule

    def set_department(self, department):
        self._department = department

    def get_department(self):
        return self._department

    def set_employment_status(self, employment_status):
        self._employment_status = employment_status

    def get_employment_status(self):
        return self._employment_status

    def display_employee_info(self): #This line displays the employee information
        print("Employee Details:") #This line prints Employee Details
        print("Employee ID:", self._employee_ID) #This line prints the employee ID
        print("First Name:", self._first_name) #This line prints the employee first name
        print("Last Name:", self._last_name) #This line prints the employee last name
        print("Role:", self._role) #This line prints the role of the employee
        print("Schedule:", self._schedule) #This line prints the schedule of the employee
        print("Department:", self._department) #This line prints the department of the employee
        print("Employment Status:", self._employment_status) #This line prints the status of the employee
class Tour: #This class represents the Tour
    def __init__(self, type_of_tour, duration, date, quantity_of_pieces_in_tour, num_of_people, tour_guide_name, language_proficiency, availability_schedule): # The constructor method initializes the object with the provided values for its attributes
        self._type_of_tour = type_of_tour # This line sets the type_of_tour attribute of the Tour object to the value passed as the type_of_tour parameter
        self._duration = duration # This line sets the duration attribute of the Tour object to the value passed as the duration parameter
        self._date = date # This line sets the date attribute of the Tour object to the value passed as the date parameter
        self._quantity_of_pieces_in_tour = quantity_of_pieces_in_tour # This line sets the quantity_of_pieces_in_tour attribute of the Tour object to the value passed as the quantity_of_pieces_in_tour parameter
        self._num_of_people = num_of_people # This line sets the num_of_people attribute of the Tour object to the value passed as the num_of_people parameter
        self._tour_guide_name = tour_guide_name # This line sets the tour_guide_name attribute of the Tour object to the value passed as the tour_guide_name parameter
        self._language_proficiency = language_proficiency # This line sets the language_proficiency attribute of the Tour object to the value passed as the language_proficiency parameter
        self._availability_schedule = availability_schedule # This line sets the availability_schedule attribute of the Tour object to the value passed as the availability_schedule parameter
#setter method for all attributes that can modify, getter method for all attributes that retrieves
    def set_type_of_tour(self, type_of_tour):
        self._type_of_tour = type_of_tour

    def get_type_of_tour(self):
        return self._type_of_tour

    def set_duration(self, duration):
        self._duration = duration

    def get_duration(self):
        return self._duration

    def set_date(self, date):
        self._date = date

    def get_date(self):
        return self._date

    def set_quantity_of_pieces_in_tour(self, quantity_of_pieces):
        self._quantity_of_pieces_in_tour = quantity_of_pieces

    def get_quantity_of_pieces_in_tour(self):
        return self._quantity_of_pieces_in_tour

    def set_num_of_people(self, num_of_people):
        self._num_of_people = num_of_people

    def get_num_of_people(self):
        return self._num_of_people

    def set_tour_guide_name(self, tour_guide_name):
        self._tour_guide_name = tour_guide_name

    def get_tour_guide_name(self):
        return self._tour_guide_name

    def set_language_proficiency(self, language_proficiency):
        self._language_proficiency = language_proficiency

    def get_language_proficiency(self):
        return self._language_proficiency

    def set_availability_schedule(self, availability_schedule):
        self._availability_schedule = availability_schedule

    def get_availability_schedule(self):
        return self._availability_schedule
    def display_tour_info(self):#This function dispalys all the tour information
        print("Tour Details:") #This line prints Tour Details
        print("Type of tour :", self._type_of_tour) #This line prints thr type of tour
        print("Duartion:", self._duration) #This line prints the duration of tour
        print("Date:", self._date) #This line prints the date of the tour
        print("Quantity of pieces in the tour:", self._quantity_of_pieces_in_tour) #This line prints the quantity of pieces in the tour
        print("Number of people:", self._num_of_people) #This line prints the number of people in the tour
        print("Tour Guide Name:", self._tour_guide_name) #This line prints the tour guide name
        print("Language Proficiency:", self._language_proficiency) #This line prints the language proficiency
        print("Availability Schedule:", self._availability_schedule) #This line prints the availability schedule
class Visitor:#This class represents the Ticket
    def __init__(self, firstname, lastname, age, gender, username, password, email, number, ticket_num, typeofplan, tour): # The constructor method initializes the object with the provided values for its attributes
        self._firstname = firstname # This line sets the first name attribute of the Visitor object to the value passed as the firstname parameter
        self._lastname = lastname # This line sets the last name attribute of the Ticket Visitor to the value passed as the last name parameter
        self._age = age # This line sets the age attribute of the Ticket object to the value passed as the age parameter
        self._gender = gender # This line sets the gender attribute of the Visitor object to the value passed as the gender parameter
        self._username = username # This line sets the username attribute of the Visitor object to the value passed as the username parameter
        self._password = password # This line sets the password attribute of the Visitor object to the value passed as the password parameter
        self._email = email # This line sets the email attribute of the Visitor object to the value passed as the email parameter
        self._number = number # This line sets the number attribute of the Visitor object to the value passed as the number parameter
        self._ticket_num = ticket_num # This line sets the ticket_num attribute of the Visitor object to the value passed as the ticket_num parameter
        self._typeofplan = typeofplan # This line sets the typeofplan attribute of the Visitor object to the value passed as the typeofplan parameter
        self._tour = tour # This line sets the tour attribute of the Visitor object to the value passed as the tour parameter
#setter method for all attributes that can modify, getter method for all attributes that retrieves
    def set_firstname(self, firstname):
        self._firstname = firstname

    def get_firstname(self):
        return self._firstname

    def set_lastname(self, lastname):
        self._lastname = lastname

    def get_lastname(self):
        return self._lastname

    def set_age(self, age):
        self._age = age

    def get_age(self):
        return self._age

    def set_gender(self, gender):
        self._gender = gender

    def get_gender(self):
        return self._gender

    def set_username(self, username):
        self._username = username

    def get_username(self):
        return self._username

    def set_password(self, password):
        self._password = password

    def get_password(self):
        return self._password

    def set_email(self, email):
        self._email = email

    def get_email(self):
        return self._email

    def set_number(self, number):
        self._number = number

    def get_number(self):
        return self._number

    def set_ticket_num(self, ticket_num):
        self._ticket_num = ticket_num

    def get_ticket_num(self):
        return self._ticket_num

    def set_typeofplan(self, typeofplan):
        self._typeofplan = typeofplan

    def get_typeofplan(self):
        return self._typeofplan

    def set_tour(self, tour):
        self._tour = tour

    def get_tour(self):
        return self._tour

    def display_visitor_info(self): #This method displaus the ticket information
        print("Visitor Details:") #This line prints Visitor details
        print("First Name:", self._firstname)
        print("Last Name:", self._lastname)
        print("Age:", self._age)
        print("Gender:", self._gender)
        print("Username:", self._username)
        print("Email:", self._email)
        print("Number:", self._number)
        print("Ticket Number:", self._ticket_num)
        print("Type of Plan:", self._typeofplan)
        print("Tour:", self._tour)
class Ticket:#This class represents the tickets
    def __init__(self, firstname, lastname, age,ticket_num, expiration, date_of_purchase, time_of_purchase, price, typeofplan, tour):
        self._firstname = firstname # This line sets the firstname attribute of the Ticket object to the value passed as the firstname parameter
        self._lastname = lastname # This line sets the lastname attribute of the Ticket object to the value passed as the lastname parameter
        self._age = age # This line sets the age attribute of the Ticket object to the value passed as the age parameter
        self._ticket_num = ticket_num # This line sets the ticket_num attribute of the Ticket object to the value passed as the ticket_num parameter
        self._expiration = expiration # This line sets the expiration attribute of the Ticket object to the value passed as the expiration parameter
        self._date_of_purchase = date_of_purchase # This line sets the date_of_purchase attribute of the Ticket object to the value passed as the date_of_purchase parameter
        self._time_of_purchase = time_of_purchase # This line sets the time_of_purchase attribute of the Ticket object to the value passed as the time_of_purchase parameter
        self._price = price # This line sets the price attribute of the Ticket object to the value passed as the price parameter
        self._typeofplan = typeofplan # This line sets the typeofplan attribute of the Ticket object to the value passed as the typeofplan parameter
        self._tour = tour # This line sets the tour attribute of the Ticket object to the value passed as the tour parameter
#setter method for all attributes that can modify, getter method for all attributes that retrieves
    def set_firstname(self, firstname):
        self._firstname = firstname

    def get_firstname(self):
        return self._firstname

    def set_lastname(self, lastname):
        self._lastname = lastname

    def get_lastname(self):
        return self._lastname

    def set_age(self,age):
      self._age=age

    def get_age(self):
      return self._age

    def set_ticket_num(self, ticket_num):
        self._ticket_num = ticket_num

    def get_ticket_num(self):
        return self._ticket_num

    def set_expiration(self, expiration):
        self._expiration = expiration

    def get_expiration(self):
        return self._expiration

    def set_date_of_purchase(self, date_of_purchase):
        self._date_of_purchase = date_of_purchase

    def get_date_of_purchase(self):
        return self._date_of_purchase

    def set_time_of_purchase(self, time_of_purchase):
        self._time_of_purchase = time_of_purchase

    def get_time_of_purchase(self):
        return self._time_of_purchase

    def set_price(self, price):
        self._price = price

    def get_price(self):
        return self._price

    def set_typeofplan(self, typeofplan):
        self._typeofplan = typeofplan

    def get_typeofplan(self):
        return self._typeofplan

    def set_tour(self, tour):
        self._tour = tour
    def apply_pricing_logic(self):#This method applies the logic for the ticket pricing
        if self._age < 18 or self._age >= 60:  # Free tickets if they are children (age less than 18) or eldelry (age greater than 60)
            self._price = 0
        elif self._typeofplan == "Group":  # 50% discount for groups
            self._price *= 0.5
        elif self._typeofplan == "Special Event":  # Special pricing for special events
            self._price = 1500
        else:  # Regular pricing for adults
            self._price = 63.0  # Regular adult price
        # Apply VAT
        self._price *= 1.05 #This line applies VAT on the ticket

    def is_expired(self):#This function checks if the ticket is expired
        # Assuming current_date is the current date and time
        current_date = datetime.datetime.now()
        return current_date > self._expiration

    def display_ticket_information(self):#This function dispalsy the ticket information
        print("Ticket Details:") #This line prints Ticket details
        print("First Name:", self._firstname)
        print("Last Name:", self._lastname)
        print('Age:', self._age)
        print("Ticket Number:", self._ticket_num)
        print("Expiration:", self._expiration)
        print("Date of Purchase:", self._date_of_purchase)
        print("Time of Purchase:", self._time_of_purchase)
        print("Price:", self._price)
        print("Type of Plan:", self._typeofplan)
        print("Tour:", self._tour)

class Revenue:#This class represents the revenue
    def __init__(self, revenue_from_tickets, revenue_from_merchandise, revenue_from_donations): # The constructor method initializes the object with the provided values for its attributes
        self._revenue_from_tickets = revenue_from_tickets # This line sets the revenue_from_tickets attribute of the revenue object to the value passed as the revenue_from_tickets parameter
        self._revenue_from_merchandise = revenue_from_merchandise # This line sets the revenue_from_merchandise attribute of the revenue object to the value passed as the revenue_from_merchandise parameter
        self._revenue_from_donations = revenue_from_donations # This line sets the revenue_from_donations attribute of the revenue object to the value passed as the revenue_from_donations parameter
#setter method for all attributes that can modify, getter method for all attributes that retrieves
    def set_revenue_from_tickets(self, revenue):
        self._revenue_from_tickets = revenue

    def get_revenue_from_tickets(self):
        return self._revenue_from_tickets

    def set_revenue_from_merchandise(self, revenue):
        self._revenue_from_merchandise = revenue

    def get_revenue_from_merchandise(self):
        return self._revenue_from_merchandise

    def set_revenue_from_donations(self, revenue):
        self._revenue_from_donations = revenue

    def get_revenue_from_donations(self):
        return self._revenue_from_donations

    def calculate_total_revenue(self):#This method calculates the total revenue of the musuem
        total_revenue = self._revenue_from_tickets + self._revenue_from_merchandise + self._revenue_from_donations #This line showes the cacluation we we use the sum of the revemue from ticekts, merchandise and donations
        return total_revenue #This line returns the calculted total revenue

    def calculate_revenue_breakdown(self): #This method caclultes the revenue breakdown
        print("Revenue Breakdown:")
        print("Tickets:", self._revenue_from_tickets)
        print("Merchandise:", self._revenue_from_merchandise)
        print("Donations:", self._revenue_from_donations)

    def display_revenue_info(self): #This method displays the revenue information
        print("Total Revenue:", self.calculate_total_revenue())
        self.calculate_revenue_breakdown()



# Test case for Artowrk class
if __name__ == "__main__":
    artwork1 = Artwork("The Starry Night", "Painting", "Vincent van Gogh", 1889, "France", "Excellent", 1, 200000000)
    artwork2 = Artwork("The Persistence of Memory", "Painting", "Salvador Dali", 1931, "Spain", "Excellent", 1, 150000000)
    artwork3 = Artwork("The Scream", "Painting", "Edvard Munch", 1893, "Norway", "Good", 4, 120000000)
    artwork1.set_price(9000000)
    artwork2.get_condition()
    Artwork.display_all_details()
    Artwork.display_all_names()
# Test case for gallery class
if __name__ == "__main__":
    gallery1 = Gallery("Renaissance Art", "John Smith", "2023-05-10")
    gallery1.set_theme('Stars')
    gallery1.get_curator()
    gallery1.add_piece()  # Add a piece to the gallery
    gallery1.add_piece()  # Add another piece to the gallery
    gallery1.add_visitor(30)  # Add 30 visitors to the gallery
    gallery1.display_gallery_info()
    gallery1.remove_piece()  # Remove a piece from the gallery
    gallery1.remove_visitor(20)  # Remove 20 visitors from the gallery
    gallery1.display_gallery_info()

# Test case for location class
if __name__ == "__main__":
    location1 = Location("101A", "1st Floor", "(10, 20)", "Impressionist Collection", "Gallery A", "Exhibition X")
    location1.set_piece_gallery('Gallery C')
    location1.get_coordinates()
    location1.display_location_info()
# Test case for exhibition class
if __name__ == "__main__":
    special_guests = ["Bob Ross", "Khalid Ahmed", "Sarah Lucas"]
    start_time = "10:00 AM"
    end_time = "6:00 PM"
    start_date = "2024-05-01"
    end_date = "2024-05-30"
    exhibition1 = Exhibition("Impressionist Art", "Museum Staff", special_guests, start_time, end_time, start_date, end_date, 50.00, 100, 5000)
    print("Duration:", exhibition1.calculate_duration(), "days")
    exhibition1.set_end_time('8:00 PM')
    print("Duration:", exhibition1.calculate_duration(), "days")
    exhibition1.get_special_guests()
    exhibition1.display_exhibition_info()


# Test case for collection class
if __name__ == "__main__":
    significant_pieces = ["AYOUCHA", "HAND AXE", "ASTROLABE"]
    collection1 = Collection("Impressionist Art", "Laryy Will", significant_pieces, 3, 5000)
    collection1.set_theme('Dark Night')
    collection1.get_num_of_collections()
    collection1.display_collection_info()
# Test case for employee class
if __name__ == "__main__":
    employee1 = Employee("1989001", "Jassim", "AlEnzi", "Curator", "9 AM - 5 PM", "Art Department", "Full-time")
    employee1.set_schedule('8 AM - 4 PM')
    employee1.get_employee_ID()
    employee1.display_employee_info()
# Test case for tour class
if __name__ == "__main__":
    tour1 = Tour("Art Tour", 120, "2024-06-15", 20, 30, "Jassim AlEnzi", "Fluent", "Daily")
    tour1.set_num_of_people(150)
    tour1.get_availability_schedule()
    tour1.display_tour_info()

# Test case for Visitor class
if __name__ == "__main__":
    visitor1 = Visitor("Hind", "BinTamim", 20, "Female", "hindbt", "123hind", "hind07@gmail.com", "788223", "T004", "Special Event", False)
    visitor1.set_tour(True)
    visitor1.get_typeofplan()
    visitor1.display_visitor_info()
import datetime

# Test case for Ticket class
if __name__ == "__main__":
    ticket1 = Ticket("Hind", "BinTamim", 20, "T123456", datetime.datetime(2024, 4, 10), datetime.date(2024, 4, 17), datetime.time(10, 30), 0, "Special Event", False)
    ticket2 = Ticket("Latifa", "BinTamim", 18, "T123456", datetime.datetime(2024, 6, 20), datetime.date(2024, 6, 27), datetime.time(11, 00), 0, "Special Event", True)
    ticket3 = Ticket("Hissa", "BinTamim", 24, "T123456", datetime.datetime(2024, 7, 13), datetime.date(2024, 7, 20), datetime.time(12, 30), 0, "Group", True)
    ticket1.set_age(21)
    ticket1.get_date_of_purchase()
    ticket1.apply_pricing_logic()
    ticket2.apply_pricing_logic()
    ticket3.apply_pricing_logic()
    ticket1.display_ticket_information()
    ticket2.display_ticket_information()
    ticket3.display_ticket_information()
    # Check if ticket is for a tour
    # Check if ticket is expired
    if ticket1.is_expired():
        print("This ticket is expired.")
    else:
        print("This ticket is not expired.")
    if ticket2.is_expired():
        print("This ticket is expired.")
    else:
        print("This ticket is not expired.")
    if ticket3.is_expired():
        print("This ticket is expired.")
    else:
        print("This ticket is not expired.")
# Test case for revenue class
if __name__ == "__main__":
    revenue1 = Revenue(5000, 2000, 10000)
    revenue1.set_revenue_from_donations(2000000)
    revenue1.get_revenue_from_tickets()
    revenue1.display_revenue_info()
    revenue1.calculate_total_revenue()
